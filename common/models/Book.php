<?php

namespace common\models;

use Yii;
use \yii\helpers\ArrayHelper;
use \common\models\Category;

/**
 * This is the model class for table "book".
 *
 * @property int $id
 * @property string $title
 * @property string $desc
 * @property string $year
 * @property string $pub_house
 * @property string $author
 * @property string $lang
 * @property int $pages
 * @property string $isbn
 */
class Book extends \yii\db\ActiveRecord
{
    public $categories_array;
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'book';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title', 'desc', 'year', 'pub_house', 'author', 'lang', 'pages', 'isbn'], 'required'],
            [['desc'], 'string'],
            [['year'], 'safe'],
            [['pages'], 'integer'],
            [['title'], 'string', 'max' => 200],
            [['pub_house', 'author'], 'string', 'max' => 100],
            [['lang'], 'string', 'max' => 20],
            [['isbn'], 'string', 'max' => 30],
            [['categories_array'], 'safe']
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Название',
            'desc' => 'Описание',
            'year' => 'Год публикации',
            'pub_house' => 'Издательство',
            'author' => 'Автор',
            'lang' => 'Язык',
            'pages' => 'Кол-во страниц',
            'isbn' => 'ISBN',
            'categories_array' => 'Категории',
            'categoriesAsString' => 'Категории',
        ];
    }

    public function getBookCategory()
    {
        return $this->hasMany(BookCategory::className(), ['book_id' => 'id']);
    }

    public function getCategories(){
        return $this -> hasMany(Category::className(), ['id' => 'category_id']) -> via('bookCategory');
    }

    public function getDataForCategories(){
        return ArrayHelper::map(Category::find() -> all(), 'id', 'title');
    }

    public function afterFind()
    {
        $this -> categories_array = $this -> categories;
    }

    public function getCategoriesAsString(){
        $arr = ArrayHelper::map($this -> categories, 'id', 'title');
        return implode(', ', $arr);
    }


    public function afterSave($insert, $changedAttributes)
    {
        parent::afterSave($insert, $changedAttributes); // TODO: Change the autogenerated stub

        $arr = ArrayHelper::map($this -> categories, 'id', 'id');
        foreach ($this -> categories_array as $item) {
            if (!in_array($item, $arr)){
                $model = new BookCategory();
                $model -> book_id = $this -> id;
                $model -> category_id = $item;
                $model -> save();
            }
            if (isset($arr[$item])){
                unset($arr[$item]);
            }
        }
        BookCategory::deleteAll([
            'category_id' => $arr,
            'book_id' => $this -> id]);
    }

}
